
Bat_measure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001ca  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001262  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a9  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b5  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00002628  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055a  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a7f  00000000  00000000  00002d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000037cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  7a:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_clock>:
//  +---------------------------------------------------------------+
//  |                       LCD generate clock                      |
//  +---------------------------------------------------------------+
void lcd_clock(void)
{
    LCD_PORT_CTRL |= (1<<LCD_E);        // Enable E (HIGH) @ control port
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	80 61       	ori	r24, 0x10	; 16
  86:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	84 e1       	ldi	r24, 0x14	; 20
  8a:	8a 95       	dec	r24
  8c:	f1 f7       	brne	.-4      	; 0x8a <lcd_clock+0x8>
    _delay_us((1000000UL/(F_LCD * 2))); // Wait half of defined clock period
    LCD_PORT_CTRL &= ~(1<<LCD_E);       // Disable E (LOW) @ control port
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	8f 7e       	andi	r24, 0xEF	; 239
  92:	8b bb       	out	0x1b, r24	; 27
  94:	84 e1       	ldi	r24, 0x14	; 20
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <lcd_clock+0x14>
  9a:	08 95       	ret

0000009c <lcd_set>:
//  | Parameter:    data(7:4)   ->  higher nibble data              |
//  +---------------------------------------------------------------+
void lcd_set(unsigned char data)
{
    // Reset LCD data port
    LCD_PORT_DATA &= ~((1<<LCD_DB3) | (1<<LCD_DB2) | (1<<LCD_DB1) | (1<<LCD_DB0));
  9c:	98 b3       	in	r25, 0x18	; 24
  9e:	9b 71       	andi	r25, 0x1B	; 27
  a0:	98 bb       	out	0x18, r25	; 24

    if(data & (1<<7))                   // Check if data bit 7 is set
  a2:	88 23       	and	r24, r24
  a4:	1c f4       	brge	.+6      	; 0xac <lcd_set+0x10>
        LCD_PORT_DATA |= (1<<LCD_DB3);  // Set data bit 3 @ lcd bus
  a6:	98 b3       	in	r25, 0x18	; 24
  a8:	90 68       	ori	r25, 0x80	; 128
  aa:	98 bb       	out	0x18, r25	; 24
    if(data & (1<<6))                   // Check if data bit 6 is set
  ac:	86 ff       	sbrs	r24, 6
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <lcd_set+0x1a>
        LCD_PORT_DATA |= (1<<LCD_DB2);  // Set data bit 2 @ lcd bus
  b0:	98 b3       	in	r25, 0x18	; 24
  b2:	90 64       	ori	r25, 0x40	; 64
  b4:	98 bb       	out	0x18, r25	; 24
    if(data & (1<<5))                   // Check if data bit 5 is set
  b6:	85 ff       	sbrs	r24, 5
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <lcd_set+0x24>
        LCD_PORT_DATA |= (1<<LCD_DB1);  // Set data bit 1 @ lcd bus
  ba:	98 b3       	in	r25, 0x18	; 24
  bc:	90 62       	ori	r25, 0x20	; 32
  be:	98 bb       	out	0x18, r25	; 24
    if(data & (1<<4))                   // Check if data bit 4 is set
  c0:	84 ff       	sbrs	r24, 4
  c2:	03 c0       	rjmp	.+6      	; 0xca <lcd_set+0x2e>
        LCD_PORT_DATA |= (1<<LCD_DB0);  // Set data bit 0 @ lcd bus
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	88 bb       	out	0x18, r24	; 24

    // Generate a clock period
    lcd_clock();
  ca:	0e 94 41 00 	call	0x82	; 0x82 <lcd_clock>
  ce:	08 95       	ret

000000d0 <lcd_cmd>:
//  |                   LCD instruction transfer                    |
//  +---------------------------------------------------------------+
//  | Parameter:    instruction ->  display command                 |
//  +---------------------------------------------------------------+
void lcd_cmd(unsigned char instruction)
{
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
    // Select instruction register
    LCD_PORT_CTRL &= ~(1<<LCD_RS);
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	8f 7b       	andi	r24, 0xBF	; 191
  d8:	8b bb       	out	0x1b, r24	; 27
    
    lcd_set(instruction);       // Write high nibble to databus
  da:	8c 2f       	mov	r24, r28
  dc:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_set>
    lcd_set((instruction<<4));  // Write low nibble to databus
  e0:	8c 2f       	mov	r24, r28
  e2:	82 95       	swap	r24
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_set>
  ea:	84 e9       	ldi	r24, 0x94	; 148
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_cmd+0x1c>
    
    // Wait until instruction is accessed on the LCD
    _delay_us(LCD_CMD_TIME);
}
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <lcd_char>:
//  |                   LCD character transfer                      |
//  +---------------------------------------------------------------+
//  | Parameter:    data    ->  ASCII/defined character             |
//  +---------------------------------------------------------------+
void lcd_char(unsigned char data)
{
  f4:	cf 93       	push	r28
  f6:	c8 2f       	mov	r28, r24
    // Select data register
    LCD_PORT_CTRL |= (1<<LCD_RS);
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	8b bb       	out	0x1b, r24	; 27
    
    lcd_set(data);      // Write high nibble to databus
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_set>
    lcd_set((data<<4)); // Write low nibble to databus
 104:	8c 2f       	mov	r24, r28
 106:	82 95       	swap	r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_set>
 10e:	84 e9       	ldi	r24, 0x94	; 148
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_char+0x1c>
    
    // Wait until data is accessed on the LCD
    _delay_us(LCD_WRITE_TIME);
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_string>:
//  |                       LCD string transfer                     |
//  +---------------------------------------------------------------+
//  | Parameter:    data (ptr)  ->  ASCII/ defined character array  |
//  +---------------------------------------------------------------+
void lcd_string(const char *data)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
    // Wait until \0 escape char is reached
    while(*data != LCD_NULL)
 11e:	03 c0       	rjmp	.+6      	; 0x126 <lcd_string+0xe>
    {
        lcd_char((unsigned char)*data);    // Send character
 120:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_char>
        data++;                             // Increment data
 124:	21 96       	adiw	r28, 0x01	; 1
//  | Parameter:    data (ptr)  ->  ASCII/ defined character array  |
//  +---------------------------------------------------------------+
void lcd_string(const char *data)
{
    // Wait until \0 escape char is reached
    while(*data != LCD_NULL)
 126:	88 81       	ld	r24, Y
 128:	81 11       	cpse	r24, r1
 12a:	fa cf       	rjmp	.-12     	; 0x120 <lcd_string+0x8>
    {
        lcd_char((unsigned char)*data);    // Send character
        data++;                             // Increment data
    }
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <lcd_clear>:
//  +---------------------------------------------------------------+
//  |                       LCD clear screen                        |
//  +---------------------------------------------------------------+
void lcd_clear(void)
{
    lcd_cmd(LCD_CLEAR);         // Clear the LCD screen
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e6       	ldi	r24, 0x6F	; 111
 13a:	97 e1       	ldi	r25, 0x17	; 23
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_clear+0xa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_clear+0x10>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <lcd_init>:
//  |                       LCD initialization                      |
//  +---------------------------------------------------------------+
void lcd_init(void)
{
    // Initialize LCD command and data lines
    LCD_DDR_CTRL |= (1<<LCD_RS) | (1<<LCD_E);
 146:	8a b3       	in	r24, 0x1a	; 26
 148:	80 65       	ori	r24, 0x50	; 80
 14a:	8a bb       	out	0x1a, r24	; 26
    LCD_DDR_DATA |= (1<<LCD_DB3) | (1<<LCD_DB2) | (1<<LCD_DB1) | (1<<LCD_DB0);
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	84 6e       	ori	r24, 0xE4	; 228
 150:	87 bb       	out	0x17, r24	; 23
    
    LCD_PORT_CTRL &= ~((1<<LCD_RS) | (1<<LCD_E));
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	8f 7a       	andi	r24, 0xAF	; 175
 156:	8b bb       	out	0x1b, r24	; 27
    LCD_PORT_DATA &= ~((1<<LCD_DB3) | (1<<LCD_DB2) | (1<<LCD_DB1) | (1<<LCD_DB0));
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	8b 71       	andi	r24, 0x1B	; 27
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	8f e2       	ldi	r24, 0x2F	; 47
 160:	95 e7       	ldi	r25, 0x75	; 117
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x1c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_init+0x22>
 168:	00 00       	nop
    
    // Wait until LCD has started
    _delay_ms(LCD_STARTUP_TIME);
    
    // Setup 4 bit mode & wait function time
    lcd_set(LCD_FUNCTION);
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	94 e9       	ldi	r25, 0x94	; 148
 172:	9a 95       	dec	r25
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x2c>
    _delay_us(LCD_FUNCTION_TIME);
    
    // Setup LCD settings
    lcd_cmd(LCD_FUNCTION | LCD_FUNCTION_2LINE);                                 // Setup number of display lines and character font
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_cmd>
    lcd_cmd(LCD_DISPLAY | LCD_DISPLAY_ON);  // | LCD_CURSOR_ON | LCD_BLINK_ON); // Setup display status, display cursor, display cursor blink
 17c:	8c e0       	ldi	r24, 0x0C	; 12
 17e:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_cmd>
    lcd_cmd(LCD_ENTRY | LCD_ENTRY_INCREMENT);                                   // Setup display cursor move direction
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_cmd>

    // Clears entire display
    lcd_clear();
 188:	0e 94 99 00 	call	0x132	; 0x132 <lcd_clear>
 18c:	08 95       	ret

0000018e <lcd_home>:
//  +---------------------------------------------------------------+
//  |                   LCD cursor to home position                 |
//  +---------------------------------------------------------------+
void lcd_home(void)
{
    lcd_cmd(LCD_HOME);          // Return cursor to the start position (0/0)
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e6       	ldi	r24, 0x6F	; 111
 196:	97 e1       	ldi	r25, 0x17	; 23
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_home+0xa>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_home+0x10>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <main>:
#include "adc/adc.h"
#include "lcd/lcd.h"

int main (void)
{
   lcd_init();
 1a2:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_init>
//        if(adc_value > 823)
//        {
//            bat = 100;
//        }

	   lcd_home();
 1a6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_home>
	   lcd_string("Spannung: ");
 1aa:	80 e6       	ldi	r24, 0x60	; 96
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	8e e9       	ldi	r24, 0x9E	; 158
 1b6:	94 e2       	ldi	r25, 0x24	; 36
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x16>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x20>
 1c2:	00 00       	nop
 1c4:	f0 cf       	rjmp	.-32     	; 0x1a6 <main+0x4>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
